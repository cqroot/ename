#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import os
import subprocess
import sys

RENAME_TMP_FILE = ".ename.tmp"
EDITOR = os.environ.get("EDITOR", "vim")


class Color(object):
    @staticmethod
    def fg_black(s):
        return "\033[30m%s\033[0m" % s

    @staticmethod
    def fg_red(s):
        return "\033[31m%s\033[0m" % s

    @staticmethod
    def fg_green(s):
        return "\033[32m%s\033[0m" % s

    @staticmethod
    def fg_yellow(s):
        return "\033[33m%s\033[0m" % s

    @staticmethod
    def fg_blue(s):
        return "\033[34m%s\033[0m" % s

    @staticmethod
    def fg_magenta(s):
        return "\033[35m%s\033[0m" % s

    @staticmethod
    def fg_cyan(s):
        return "\033[36m%s\033[0m" % s

    @staticmethod
    def fg_white(s):
        return "\033[37m%s\033[0m" % s

    @staticmethod
    def bg_black(s):
        return "\033[40m%s\033[0m" % s

    @staticmethod
    def bg_red(s):
        return "\033[41m%s\033[0m" % s

    @staticmethod
    def bg_green(s):
        return "\033[42m%s\033[0m" % s

    @staticmethod
    def bg_yellow(s):
        return "\033[43m%s\033[0m" % s

    @staticmethod
    def bg_blue(s):
        return "\033[44m%s\033[0m" % s

    @staticmethod
    def bg_magenta(s):
        return "\033[45m%s\033[0m" % s

    @staticmethod
    def bg_cyan(s):
        return "\033[46m%s\033[0m" % s

    @staticmethod
    def bg_white(s):
        return "\033[47m%s\033[0m" % s


class RenameOptions:
    def __init__(self):
        self.__file_only = False
        self.__directory_only = False
        self.__all = False
        pass

    def file_only(self):
        return self.__file_only

    def set_file_only(self, value):
        self.__file_only = value

    def directory_only(self):
        return self.__directory_only

    def set_directory_only(self, value):
        self.__directory_only = value

    def all(self):
        return self.__all

    def set_all(self, value):
        self.__all = value


RENAME_OPTIONS = RenameOptions()


def show_version():
    print("ename v0.0.1")


def show_help():
    print(
        """Use your favorite editor to batch rename files and directories.

Notice:
1. Do not add or subtract lines.
2. Unchanged lines are ignored.

Usage:
  edname [flags]

Flags:
  -f, --file-only        rename file only
  -d, --directory-only   rename directory only
  -a, --all              do not ignore entries starting with .
  -h, --help             help for ename
  -v, --version          print ename version"""
    )


def print_error(msg):
    print("%s %s" % (Color.fg_red("ERROR:"), msg))


def gen_rename_tmp(files):
    with open(RENAME_TMP_FILE, "w") as f:
        for file in files:
            f.write("%s\n" % file)
        f.flush()
    subprocess.call([EDITOR, RENAME_TMP_FILE])


def remove_rename_tmp():
    os.remove(RENAME_TMP_FILE)


def get_new_names():
    new_names = []

    with open(RENAME_TMP_FILE, "r") as f:
        for line in f.readlines():
            if line.rstrip() == RENAME_TMP_FILE:
                continue
            new_names.append(line.rstrip())

    return new_names


def batch_rename(rename_pairs):
    max_name_len = 0
    for rename_pair in rename_pairs:
        if len(rename_pair["old"]) > max_name_len:
            max_name_len = len(rename_pair["old"])
    for rename_pair in rename_pairs:
        print(
            "%s%s  %s  %s"
            % (
                rename_pair["old"],
                " " * (max_name_len - len(rename_pair["old"])),
                Color.fg_blue("->"),
                rename_pair["new"],
            )
        )

    confirm_text = ""
    if sys.version_info[0] == 2:
        confirm_text = raw_input("Confirm to rename the above file [y/N] ")
    else:
        confirm_text = input("Confirm to rename the above file [y/N] ")

    if confirm_text != "y" and confirm_text != "Y":
        return 1

    for rename_pair in rename_pairs:
        os.rename(
            os.path.join(".", rename_pair["old"]), os.path.join(".", rename_pair["new"])
        )
    return 0


def start_rename(old_names, new_names):
    if len(old_names) != len(new_names):
        print_error("The number of new item names is inconsistent with the original")
        print("    old_name_count: %d, old_names: %s" % (len(old_names), old_names))
        print("    new_name_count: %d, new_names: %s" % (len(new_names), new_names))
        return 1

    rename_pairs = []

    for i in range(len(old_names)):
        if old_names[i] == new_names[i]:
            continue
        rename_pairs.append({"old": old_names[i], "new": new_names[i]})

    if len(rename_pairs) == 0:
        print("No items need to be renamed")
        return 0

    return batch_rename(rename_pairs)


def main():
    old_names = []
    for old_name in sorted(os.listdir(os.getcwd())):
        abs_old_name = os.path.join(os.getcwd(), old_name)
        if RENAME_OPTIONS.directory_only() and not os.path.isdir(abs_old_name):
            continue
        if RENAME_OPTIONS.file_only() and not os.path.isfile(abs_old_name):
            continue
        if not RENAME_OPTIONS.all() and old_name[0] == ".":
            continue
        old_names.append(old_name)

    if len(old_names) == 0:
        print_error("No items to rename")
        return 1

    gen_rename_tmp(old_names)
    new_names = get_new_names()

    ret = start_rename(old_names, new_names)
    remove_rename_tmp()

    return ret


if __name__ == "__main__":

    for arg in sys.argv[1:]:
        if arg == "-h" or arg == "--help":
            show_help()
            exit(0)

        if arg == "-v" or arg == "--version":
            show_version()
            exit(0)

        if arg == "-f" or arg == "--file-only":
            RENAME_OPTIONS.set_file_only(True)
            continue

        if arg == "-d" or arg == "--directory-only":
            RENAME_OPTIONS.set_directory_only(True)
            continue

        if arg == "-a" or arg == "--all":
            RENAME_OPTIONS.set_all(True)
            continue

    exit(main())
